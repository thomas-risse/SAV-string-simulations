<jittershader name="Super string">
    <description>Traces a nice string </description>
    <param name="position" type="vec3" state="POSITION" />
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="color" type="vec4" state="COLOR" />

		<param name="offsetz" type="float" state="OFFSETZ" />
    
    <language name="glsl" version="1.5">
        <bind param="position" program="vp" />
        <bind param="modelViewProjectionMatrix" program="vp" />
        <bind param="color" program="vp" />

				<bind param="offsetz" program="vp" />

        <program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 modelViewProjectionMatrix;
in vec3 position;
in vec4 color;

out vec4 vColor;

uniform float offsetz;

void main() {
    gl_Position =  (vec4(position, 1.0) + vec4(0, 0, offsetz, 0)) ;
    vColor = color;
}
]]>
        </program>
        <program name="gp" type="geometry">
<![CDATA[
#version 330 core

layout(lines) in;
layout(triangle_strip, max_vertices = 32) out;

in vec4 vColor[];
out vec4 gColor;

uniform mat4 modelViewProjectionMatrix;

// Number of sides for the tube
const int SIDES = 8;
const float RADIUS = 0.02; // Adjust for tube thickness

// Helper to compute a vector perpendicular to v
vec3 perpendicular(vec3 v) {
    if (abs(v.x) < abs(v.y)) {
        return normalize(vec3(0, -v.z, v.y));
    } else {
        return normalize(vec3(-v.z, 0, v.x));
    }
}

void main() {
    vec3 p0 = gl_in[0].gl_Position.xyz;
    vec3 p1 = gl_in[1].gl_Position.xyz;
    vec3 dir = normalize(p1 - p0);
    vec3 up = perpendicular(dir);
    vec3 right = normalize(cross(dir, up));
    up = cross(right, dir);

    for (int i = 0; i <= SIDES; ++i) {
        float theta = 2.0 * 3.1415926 * float(i) / float(SIDES);
        float c = cos(theta);
        float s = sin(theta);
        vec3 offset = RADIUS * (c * right + s * up);

        // Start circle
        vec4 pos0 = vec4(p0 + offset, 1.0);
        gl_Position = modelViewProjectionMatrix * pos0;
        gColor = vColor[0];
        EmitVertex();

        // End circle
        vec4 pos1 = vec4(p1 + offset, 1.0);
        gl_Position = modelViewProjectionMatrix * pos1;
        gColor = vColor[1];
        EmitVertex();
    }
    EndPrimitive();
}
]]>
        </program>
        <program name="fp" type="fragment">
<![CDATA[
#version 330 core

in vec4 gColor;
out vec4 color;

void main() {
    color = gColor;
}
]]>
        </program>
    </language>
</jittershader>